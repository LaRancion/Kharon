agent = {
  # System Call Evasion
  indirect_syscall = false      # [true|false] Enable indirect system calls to evade EDR hooks
  
  # Anti-Malware Bypass
  bypass_amsi_etw = "none"     # [none|amsi|etw|all] Select which security mechanisms to bypass:
                                # - amsi: Windows AMSI (Antimalware Scan Interface)
                                # - etw: Event Tracing for Windows
                                # - all: Both AMSI and ETW
  
  alloc_method = "standard"    # [drip|standard]      method to allocate memory using VirtualAlloc
  write_method = "standard"    # [write_apc|standard] method to wirte memory

  # Call Stack Obfuscation
  call_stack_spoof = false      # [true|false] Spoof call stack for sensitive API calls

  # Memory Obfuscation Settings
  mask = {
    beacon_technique = "none"   # [none|timer] Sleep obfuscation technique:
                                  # - none: No memory masking
                                  # - timer: Use timer-based memory masking
    heap_enabled = false        # [true|false] Obfuscate heap allocations during sleep
  }

  # Injection Configuration
  injection_general = {
    technique = "standard"      # [standard|stomp] Current injection techniques:
                                  # - standard: Classic process injection
                                  # - stomp: stomp module to inject shellcode into text section (module is ramdom)
  }

  # Beacon Timing Configuration
  sleep = {
    interval = 4                # [1-60] Beacon callback interval in seconds
    jitter   = 0                # [0-100] Callback jitter percentage (0-100%)
  }

  # Beacon Object File Settings
  bof = {
    api_hook = false            # [true|false] Enable BOF API hooking
    reuse_memory = false        # [true|false] Reuse memory between BOF executions
    min_alloc = 0x1000          # [0x100-0x10000] Minimum memory allocation size (in bytes)
  }

  # Post-Exploitation Configuration
  postex_shellcode = {
    technique = "standard"      # [standard|stomp] Post-ex shellcode execution method
    
    fork = {
      pipe_name = ""                                      # [optional] Named pipe for fork&run IPC
      spawnto_x64 = "C:\\Windows\\System32\\notepad.exe"  # Default sacrificial process:
                                                            # - Recommended to change from default notepad.exe
                                                            # - Use same bitness as target architecture
    }
  }

  # Self-Destruct Mechanism
  killdate = {
    enabled = false            # [true|false] Enable automatic termination
    date = "MM/DD/YYYY"        # [format: MM/DD/YYYY] Termination date (e.g. "12/31/2024")
    self_delete = false        # [true|false] Remove payload on termination
    exit_method = "process"    # [process|thread] Termination method:
                                # - process: Terminate entire process
                                # - thread: Only terminate beacon thread
  }
},

loader = {
  # Loader General Settings
  injection_technique = "standard"  # [standard] Payload injection technique
  indirect_syscall = false          # [true|false] Use indirect syscalls in loader
  encrypt_shellcode = "rc4"         # [rc4] Shellcode encryption algorithm

  # Stager Configuration
  stager = {
    enabled = false                 # [true|false] Enable stager mode
    http_library = "wininet"        # [wininet|winhttp] HTTP library implementation:
                                      # - wininet: Internet Explorer compatible
                                      # - winhttp: More modern, no IE dependencies
    endpoint = "/shellcode.bin"     # Payload request path:                                    
    
    http = {
      headers = {
        Cookie = ""                # [optional] Session cookie for authentication
        User-Agent = "Mozilla/5.0" # [security] Recommended to match common browsers:
                                      # - Example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
      }
    }
  },

  # Stageless Configuration
  stageless = {
    enabled = false                 # [true|false] Enable direct payload execution
    storage_section = ".text"       # [.text|.data|.rdata] PE section for payload storage:
                                      # - .text: Typically executable section
                                      # - .data: Typically writable section
                                      # - .rdata: Read-only data section
  }
}